// Code generated by MockGen. DO NOT EDIT.
// Source: auth_service.go

// Package mock is a generated GoMock package.
package mock

import (
	model "qd_authentication_api/internal/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthServicer is a mock of AuthServicer interface.
type MockAuthServicer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServicerMockRecorder
}

// MockAuthServicerMockRecorder is the mock recorder for MockAuthServicer.
type MockAuthServicerMockRecorder struct {
	mock *MockAuthServicer
}

// NewMockAuthServicer creates a new mock instance.
func NewMockAuthServicer(ctrl *gomock.Controller) *MockAuthServicer {
	mock := &MockAuthServicer{ctrl: ctrl}
	mock.recorder = &MockAuthServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServicer) EXPECT() *MockAuthServicerMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthServicer) Authenticate(email, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", email, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthServicerMockRecorder) Authenticate(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthServicer)(nil).Authenticate), email, password)
}

// Register mocks base method.
func (m *MockAuthServicer) Register(email, password, firstName, lastName string, dateOfBirth *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", email, password, firstName, lastName, dateOfBirth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAuthServicerMockRecorder) Register(email, password, firstName, lastName, dateOfBirth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServicer)(nil).Register), email, password, firstName, lastName, dateOfBirth)
}

// Verify mocks base method.
func (m *MockAuthServicer) Verify(verificationToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", verificationToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockAuthServicerMockRecorder) Verify(verificationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAuthServicer)(nil).Verify), verificationToken)
}
